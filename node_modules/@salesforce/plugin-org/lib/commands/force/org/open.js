"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgOpenCommand = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os_1 = require("os");
const url_1 = require("url");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const utils_1 = require("../../../shared/utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-org', 'open');
class OrgOpenCommand extends command_1.SfdxCommand {
    async run() {
        const frontDoorUrl = await this.buildFrontdoorUrl();
        const url = this.flags.path ? `${frontDoorUrl}&retURL=${this.flags.path}` : frontDoorUrl;
        const orgId = this.org.getOrgId();
        const username = this.org.getUsername();
        const output = { orgId, url, username };
        if (new kit_1.Env().getBoolean('SFDX_CONTAINER_MODE')) {
            // instruct the user that they need to paste the URL into the browser
            this.ux.styledHeader('Action Required!');
            this.ux.log(messages.getMessage('containerAction', [orgId, url]));
            return output;
        }
        this.ux.log(messages.getMessage('humanSuccess', [orgId, username, url]));
        if (this.flags.urlonly) {
            return output;
        }
        // we actually need to open the org
        await this.checkLightningDomain(url);
        await utils_1.openUrl(url);
        return output;
    }
    async buildFrontdoorUrl() {
        await this.org.refreshAuth(); // we need a live accessToken for the frontdoor url
        const conn = this.org.getConnection();
        const accessToken = conn.accessToken;
        const instanceUrl = this.org.getField(core_1.Org.Fields.INSTANCE_URL);
        const instanceUrlClean = instanceUrl.replace(/\/$/, '');
        return `${instanceUrlClean}/secur/frontdoor.jsp?sid=${accessToken}`;
    }
    async checkLightningDomain(url) {
        const domain = `https://${/https?:\/\/([^.]*)/.exec(url)[1]}.lightning.force.com`;
        const timeout = new kit_1.Duration(new kit_1.Env().getNumber('SFDX_DOMAIN_RETRY', 240), kit_1.Duration.Unit.SECONDS);
        if (core_1.sfdc.isInternalUrl(url) || timeout.seconds === 0) {
            return;
        }
        const resolver = await core_1.MyDomainResolver.create({
            url: new url_1.URL(domain),
            timeout,
            frequency: new kit_1.Duration(1, kit_1.Duration.Unit.SECONDS),
        });
        this.ux.startSpinner(messages.getMessage('domainWaiting'));
        try {
            const ip = await resolver.resolve();
            this.logger.debug(`Found IP ${ip} for ${domain}`);
            return;
        }
        catch (error) {
            this.logger.debug(`Did not find IP for ${domain} after ${timeout.seconds} seconds`);
            throw new core_1.SfdxError(messages.getMessage('domainTimeoutError'), 'domainTimeoutError', [
                messages.getMessage('domainTimeoutAction'),
            ]);
        }
    }
}
exports.OrgOpenCommand = OrgOpenCommand;
OrgOpenCommand.description = messages.getMessage('description');
OrgOpenCommand.examples = messages.getMessage('examples').split(os_1.EOL);
OrgOpenCommand.requiresUsername = true;
OrgOpenCommand.flagsConfig = {
    path: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('cliPath'),
        env: 'FORCE_OPEN_URL',
        parse: (input) => encodeURIComponent(decodeURIComponent(input)),
    }),
    urlonly: command_1.flags.boolean({
        char: 'r',
        description: messages.getMessage('urlonly'),
    }),
};
//# sourceMappingURL=open.js.map