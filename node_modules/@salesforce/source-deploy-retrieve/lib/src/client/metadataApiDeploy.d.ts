import { MetadataApiDeployStatus, MetadataApiDeployOptions as ApiOptions, FileResponse, MetadataTransferResult } from './types';
import { MetadataTransfer, MetadataTransferOptions } from './metadataTransfer';
import { ComponentSet } from '../collections';
export declare class DeployResult implements MetadataTransferResult {
    readonly response: MetadataApiDeployStatus;
    readonly components: ComponentSet;
    private readonly diagnosticUtil;
    constructor(response: MetadataApiDeployStatus, components: ComponentSet);
    getFileResponses(): FileResponse[];
    private createResponses;
    private getState;
    /**
     * Groups messages from the deploy result by component fullName and type
     */
    private getDeployMessages;
    /**
     * Fix any issues with the deploy message returned by the api.
     * TODO: remove cases if fixes are made in the api.
     */
    private sanitizeDeployMessage;
    private key;
}
export interface MetadataApiDeployOptions extends MetadataTransferOptions {
    apiOptions?: ApiOptions;
}
export declare class MetadataApiDeploy extends MetadataTransfer<MetadataApiDeployStatus, DeployResult> {
    static readonly DEFAULT_OPTIONS: Partial<MetadataApiDeployOptions>;
    private options;
    private deployId;
    constructor(options: MetadataApiDeployOptions);
    protected pre(): Promise<{
        id: string;
    }>;
    protected checkStatus(id: string): Promise<MetadataApiDeployStatus>;
    protected post(result: MetadataApiDeployStatus): Promise<DeployResult>;
    protected doCancel(): Promise<boolean>;
}
