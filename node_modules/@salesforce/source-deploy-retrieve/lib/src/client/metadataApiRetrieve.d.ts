import { ComponentSet } from '../collections';
import { RegistryAccess } from '../metadata-registry';
import { FileResponse, MetadataApiRetrieveStatus, RetrieveOptions, MetadataTransferResult } from './types';
import { MetadataTransfer, MetadataTransferOptions } from './metadataTransfer';
export declare type MetadataApiRetrieveOptions = MetadataTransferOptions & RetrieveOptions & {
    registry?: RegistryAccess;
};
export declare class RetrieveResult implements MetadataTransferResult {
    readonly response: MetadataApiRetrieveStatus;
    readonly components: ComponentSet;
    constructor(response: MetadataApiRetrieveStatus, components: ComponentSet);
    getFileResponses(): FileResponse[];
}
export declare class MetadataApiRetrieve extends MetadataTransfer<MetadataApiRetrieveStatus, RetrieveResult> {
    static DEFAULT_OPTIONS: Partial<MetadataApiRetrieveOptions>;
    private options;
    constructor(options: MetadataApiRetrieveOptions);
    protected pre(): Promise<{
        id: string;
    }>;
    protected checkStatus(id: string): Promise<MetadataApiRetrieveStatus>;
    protected post(result: MetadataApiRetrieveStatus): Promise<RetrieveResult>;
    protected doCancel(): Promise<boolean>;
    private extract;
}
