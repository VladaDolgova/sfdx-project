"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const convert_1 = require("../convert");
const collections_1 = require("../collections");
const metadata_registry_1 = require("../metadata-registry");
const types_1 = require("./types");
const metadataTransfer_1 = require("./metadataTransfer");
const errors_1 = require("../errors");
const utils_1 = require("../utils");
class RetrieveResult {
    constructor(response, components) {
        this.response = response;
        this.components = components;
    }
    getFileResponses() {
        const responses = [];
        // construct failures
        if (this.response.messages) {
            const retrieveMessages = utils_1.normalizeToArray(this.response.messages);
            for (const message of retrieveMessages) {
                // match type name and fullname of problem component
                const matches = message.problem.match(/.+'(.+)'.+'(.+)'/);
                if (matches) {
                    const [typeName, fullName] = matches.slice(1);
                    responses.push({
                        fullName,
                        type: typeName,
                        state: types_1.ComponentStatus.Failed,
                        error: message.problem,
                        problemType: 'Error',
                    });
                }
                else {
                    responses.push({
                        fullName: '',
                        type: '',
                        problemType: 'Error',
                        state: types_1.ComponentStatus.Failed,
                        error: message.problem,
                    });
                }
            }
        }
        // construct successes
        for (const retrievedComponent of this.components.getSourceComponents()) {
            const { fullName, type, xml } = retrievedComponent;
            const baseResponse = {
                fullName,
                type: type.name,
                state: types_1.ComponentStatus.Changed,
            };
            if (!type.children) {
                for (const filePath of retrievedComponent.walkContent()) {
                    responses.push(Object.assign({}, baseResponse, { filePath }));
                }
            }
            if (xml) {
                responses.push(Object.assign({}, baseResponse, { filePath: xml }));
            }
        }
        return responses;
    }
}
exports.RetrieveResult = RetrieveResult;
class MetadataApiRetrieve extends metadataTransfer_1.MetadataTransfer {
    constructor(options) {
        super(options);
        this.options = Object.assign({}, MetadataApiRetrieve.DEFAULT_OPTIONS, options);
    }
    pre() {
        return __awaiter(this, void 0, void 0, function* () {
            const { packageNames } = this.options;
            if (this.components.size === 0 && (!packageNames || packageNames.length === 0)) {
                throw new errors_1.MetadataApiRetrieveError('error_no_components_to_retrieve');
            }
            const connection = yield this.getConnection();
            const requestBody = {
                apiVersion: this.components.apiVersion,
                unpackaged: this.components.getObject().Package,
            };
            // if we're retrieving with packageNames add it
            // otherwise don't - it causes errors if undefined or an empty array
            if (packageNames) {
                requestBody.packageNames = packageNames;
            }
            // @ts-ignore required callback
            return connection.metadata.retrieve(requestBody);
        });
    }
    checkStatus(id) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getConnection();
            // Recasting to use the project's RetrieveResult type
            return connection.metadata.checkRetrieveStatus(id);
        });
    }
    post(result) {
        return __awaiter(this, void 0, void 0, function* () {
            let components;
            if (result.status === types_1.RequestStatus.Succeeded) {
                components = yield this.extract(Buffer.from(result.zipFile, 'base64'));
            }
            return new RetrieveResult(result, (components !== null && components !== void 0 ? components : new collections_1.ComponentSet(undefined, this.options.registry)));
        });
    }
    doCancel() {
        return __awaiter(this, void 0, void 0, function* () {
            // retrieve doesn't require signaling to the server to stop
            return true;
        });
    }
    extract(zip) {
        return __awaiter(this, void 0, void 0, function* () {
            const converter = new convert_1.MetadataConverter(this.options.registry);
            const { merge, output } = this.options;
            const outputConfig = merge
                ? {
                    type: 'merge',
                    mergeWith: this.components.getSourceComponents(),
                    defaultDirectory: output,
                }
                : {
                    type: 'directory',
                    outputDirectory: output,
                };
            const zipComponents = collections_1.ComponentSet.fromSource({
                fsPaths: ['.'],
                registry: this.options.registry,
                tree: yield metadata_registry_1.ZipTreeContainer.create(zip),
            })
                .getSourceComponents()
                .toArray();
            const convertResult = yield converter.convert(zipComponents, 'source', outputConfig);
            return new collections_1.ComponentSet(convertResult.converted, this.options.registry);
        });
    }
}
exports.MetadataApiRetrieve = MetadataApiRetrieve;
MetadataApiRetrieve.DEFAULT_OPTIONS = { merge: false };
//# sourceMappingURL=metadataApiRetrieve.js.map