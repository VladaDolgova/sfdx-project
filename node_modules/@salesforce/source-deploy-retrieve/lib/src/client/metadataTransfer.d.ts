import { Connection, Logger } from '@salesforce/core';
import { ComponentSet } from '../collections';
import { MetadataRequestStatus, MetadataTransferResult } from './types';
export interface MetadataTransferOptions {
    usernameOrConnection: string | Connection;
    components: ComponentSet;
    apiVersion?: string;
}
export declare abstract class MetadataTransfer<Status extends MetadataRequestStatus, Result extends MetadataTransferResult> {
    protected components: ComponentSet;
    protected logger: Logger;
    private signalCancel;
    private event;
    private usernameOrConnection;
    private apiVersion;
    constructor({ usernameOrConnection, components, apiVersion }: MetadataTransferOptions);
    /**
     * Start the metadata transfer.
     *
     * @param pollInterval Frequency in milliseconds to poll for operation status
     */
    start(pollInterval?: number): Promise<Result | undefined>;
    cancel(): void;
    onUpdate(subscriber: (result: Status) => void): void;
    onFinish(subscriber: (result: Result) => void): void;
    onCancel(subscriber: (result: Status | undefined) => void): void;
    onError(subscriber: (result: Error) => void): void;
    protected getConnection(): Promise<Connection>;
    private pollStatus;
    private wait;
    protected abstract pre(): Promise<{
        id: string;
    }>;
    protected abstract checkStatus(id: string): Promise<Status>;
    protected abstract post(result: Status): Promise<Result>;
    protected abstract doCancel(): Promise<boolean>;
}
