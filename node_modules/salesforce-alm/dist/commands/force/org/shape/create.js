"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrgShapeCreateCommand = void 0;
// This is the legacy converted command file. Ignoring code-coverage since this is generated.
// THIS SHOULD BE REMOVED WHEN CONVERTED TO EXTEND SfdxCommand
/* istanbul ignore file */
const Messages = require("../../../../lib/messages");
const ToolbeltCommand_1 = require("../../../../ToolbeltCommand");
const messages = Messages();
const commandTimeOutInMS = 30e3;
class OrgShapeCreateCommand extends ToolbeltCommand_1.ToolbeltCommand {
    async run() {
        const context = await this.resolveLegacyContext();
        const ShapeRepCreateCommandImpl = require('../../../../lib/org/shapeRepCreateCommand');
        const createCommand = new ShapeRepCreateCommandImpl();
        let timeoutID;
        const timeout = new Promise((_, reject) => {
            timeoutID = setTimeout(() => {
                reject(messages.getMessage('shapeCreateFailedMessage'));
            }, commandTimeOutInMS);
        });
        return Promise.race([this.execLegacyCommand(createCommand, context), timeout]).then((result) => {
            clearTimeout(timeoutID);
            return result;
        });
    }
}
exports.OrgShapeCreateCommand = OrgShapeCreateCommand;
OrgShapeCreateCommand.theDescription = messages.getMessage('create_shape_command_description', null, 'org_shape');
OrgShapeCreateCommand.longDescription = messages.getMessage('create_shape_command_description_long', null, 'org_shape');
OrgShapeCreateCommand.help = messages.getMessage('create_shape_command_help', null, 'org_shape');
OrgShapeCreateCommand.requiresProject = false;
OrgShapeCreateCommand.requiresUsername = true;

//# sourceMappingURL=create.js.map
