"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.record = exports.bulkBatchStatus = exports.bulkJobStatus = exports.soqlQuery = exports.debugLogs = exports.promptYesNo = exports.logJson = exports.warning = exports.info = exports.failure = exports.success = void 0;
const readline = require("readline-sync");
const logApi = require("../core/logApi");
const Messages = require("./force-cli-messages");
exports.success = function (msg) {
    logApi.log(logApi.color.green(msg));
};
exports.failure = function (msg) {
    logApi.error(logApi.color.red(msg));
};
exports.info = function (msg) {
    logApi.log(msg);
};
exports.warning = function (msg) {
    logApi.warn(Messages.get('DisplayWarning', msg));
};
exports.logJson = function (msg) {
    logApi.logJson(msg);
};
/**
 * return true for yes, false for no
 *
 * @param msg
 * @returns {boolean}
 */
exports.promptYesNo = function (msg) {
    exports.warning(msg);
    const decision = readline.promptCL();
    return decision[0].toLowerCase().startsWith('y');
};
exports.debugLogs = function (logs) {
    if (logs.length === 0) {
        logApi.log(Messages.get('DisplayNoLogs'));
    }
    else {
        logApi.table(logs, {
            columns: [
                { key: 'Application', label: Messages.get('DisplayHeaderApplication') },
                {
                    key: 'DurationMilliseconds',
                    label: Messages.get('DisplayHeaderDuration'),
                },
                { key: 'Id', label: Messages.get('DisplayHeaderId') },
                { key: 'Location', label: Messages.get('DisplayHeaderLocation') },
                { key: 'LogLength', label: Messages.get('DisplayHeaderLogLength') },
                { key: 'LogUser.Name', label: Messages.get('DisplayHeaderLogUser') },
                { key: 'Operation', label: Messages.get('DisplayHeaderOperation') },
                { key: 'Request', label: Messages.get('DisplayHeaderRequest') },
                { key: 'StartTime', label: Messages.get('DisplayHeaderStartTime') },
                { key: 'Status', label: Messages.get('DisplayHeaderStatus') },
            ],
        });
    }
};
exports.soqlQuery = function (columns, records, totalCount) {
    prepNullValues(records);
    logApi.table(records, { columns });
    logApi.log(logApi.color.bold(Messages.get('DisplayQueryRecordsRetrieved', totalCount)));
};
const prepNullValues = function (records) {
    records.forEach(function (record) {
        for (const propertyKey in record) {
            if (record.hasOwnProperty(propertyKey)) {
                if (record[propertyKey] === null) {
                    record[propertyKey] = logApi.color.bold('null');
                }
                else if (typeof record[propertyKey] === 'object') {
                    prepNullValues([record[propertyKey]]);
                }
            }
        }
    });
};
exports.bulkJobStatus = function (summary) {
    bulkStatus(summary, undefined, undefined, true);
};
exports.bulkBatchStatus = function (summary, results, batchNum) {
    bulkStatus(summary, results, batchNum, false);
};
const bulkStatus = function (summary, results, batchNum, isJob) {
    exports.info(''); // newline
    if (batchNum) {
        logApi.styledHeader(Messages.get('DisplayBulkBatch', batchNum));
    }
    if (results) {
        const errorMessages = [];
        results.forEach(function (result) {
            if (result['errors']) {
                result['errors'].forEach(function (errMsg) {
                    errorMessages.push(errMsg);
                });
            }
        });
        if (errorMessages.length > 0) {
            logApi.styledHeader(Messages.get('DisplayBulkError'));
            errorMessages.forEach(function (errorMessage) {
                exports.info(errorMessage);
            });
        }
    }
    const formatOutput = [];
    for (const field in summary) {
        if (summary.hasOwnProperty(field)) {
            formatOutput.push(field);
        }
    }
    // remove url field
    delete summary['$'];
    formatOutput.splice(0, 1);
    if (isJob) {
        logApi.styledHeader(Messages.get('DisplayBulkJobStatus'));
    }
    else {
        logApi.styledHeader(Messages.get('DisplayBulkBatchStatus'));
    }
    logApi.styledHash(summary, formatOutput);
};
exports.record = function (rec) {
    recordHelper('', rec);
};
const recordHelper = function (indent, rec) {
    for (const property in rec) {
        if (!rec[property]) {
            exports.info(indent + property + ': null');
        }
        else if (typeof rec[property] === 'object') {
            exports.info(indent + property + ':');
            recordHelper(indent + '  ', rec[property]);
        }
        else if (Array.isArray(rec[property])) {
            rec[property].forEach(function (element) {
                recordHelper(indent + '  ', element);
            });
        }
        else {
            exports.info(indent + property + ': ' + JSON.stringify(rec[property]));
        }
    }
};

//# sourceMappingURL=force-cli-display.js.map
